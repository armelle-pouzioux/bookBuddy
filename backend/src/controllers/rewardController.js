import Reward from "../models/Reward.js";

// D√©finition centralis√©e des types de r√©compenses
const REWARD_DEFINITIONS = {
  firstBook: "üìö Premier livre ajout√©",
  firstFavorite: "‚ù§Ô∏è Premier favori",
  firstFinished: "‚úÖ Premier livre termin√©",
  fiveBooks: "üèÜ 5 livres ajout√©s",
};

export const createReward = async (req, res) => {
  const userId = req.user.userId;
  const { type } = req.params;

  if (!REWARD_DEFINITIONS[type]) {
    return res.status(400).json({ message: "Type de r√©compense inconnu." });
  }

  try {
    const alreadyHasReward = await Reward.findOne({ user: userId, type });

    if (alreadyHasReward) {
      return res.status(200).json({ message: "R√©compense d√©j√† obtenue." });
    }

    const reward = new Reward({
      type,
      name: REWARD_DEFINITIONS[type],
      user: userId
    });

    await reward.save();

    res.status(201).json({ message: "R√©compense d√©bloqu√©e üéâ", reward });

  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "Erreur serveur lors de la cr√©ation de la r√©compense." });
  }
};

// GET /rewards (r√©compenses de l'utilisateur connect√©)
export const getUserRewards = async (req, res) => {
  try {
    const rewards = await Reward.find({ userId: req.user.userId });
    res.status(200).json(rewards);
  } catch (err) {
    console.error("Erreur r√©cup√©ration des r√©compenses :", err);
    res.status(500).json({ message: "Erreur serveur" });
  }
};
